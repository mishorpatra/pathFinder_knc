          function zoomTo() {
            let src_val = get_val[0];
            let dest_val = get_val[1];
            let index = me.find_floor(i, me.grids_all);
            let m = me.grids_all[index].length;
            let src_x = parseInt(src_val) % m;
            let src_y = parseInt(parseInt(src_val) / m);
            let dest_x = parseInt(dest_val) % m;
            let dest_y = parseInt(parseInt(dest_val) / m);
            let dx, dy;
            if (dest_x > src_y) {
              dx = dest_x - src_x;
            } else {
              dx = src_x - dest_x;
            }
            if (dest_y > src_y) {
              dy = dest_y - src_y;
            } else {
              dy = src_y - dest_y;
            }
            let x = (src_x + dest_x) / 2;
            let y = (dest_y + src_y) / 2;
            let scale = Math.max(
              1,
              Math.min(8, 0.9 / Math.max(dx / width, dy / height))
            );
            let translate = [width / 2 - scale * x, height / 2 - scale * y];
            var transform = window.d3.zoomIdentity
              .translate(translate[0], translate[1])
              .scale(2);
            canvas
              .transition()
              .duration(750)
              .call(zoom1.transform, transform);
          }



           function timer(ms) {
        return new Promise(res => setTimeout(res, ms));
      }
      let me = this;
      var count = 0;

      async function load() {
        let gpx = me.state.canvasWidth / me.state.srcfloorL;
        let gpy = me.state.canvasHeight / me.state.srcfloorB;

        for (let i = 0; i < sp.length; i = i + 2) {
          context.beginPath();
          var half_scale = scale / 2;
          var pos_x = gpx * sp[i][0];
          var pos_y = gpy * sp[i][1];
          pos_x = pos_x + half_scale;
          pos_y = pos_y + half_scale;
          context.arc(pos_x, pos_y, scale / 1.3, 0, 2 * Math.PI);
          context.fill();
          context.fillStyle = "#6c757c";
          context.strokeStyle = "#6c757c";
          context.stroke();
          count++;
          let time = Math.floor(3000 / sp.length);
          await timer(time);
        }
      }
      if (
        !this.state.zoomed 
        // === false 
        // && (this.state.srcfloor === this.state.dstfloor) 
      ) {
        await load();
      }
      \




  // callimage(cnt, ans, count, clist, floorLlist) {
  //   function outerTimer(ms){
  //       return new Promise(res=> setTimeout(res,ms))
  //   }
  //   let me = this;
  //   async function imageLoad(){
  //     for (let ii = 0; ii < clist.length; ii++) {
  //       let i = Array.from(ans.keys())[ii];
  //       let ind = this.find_floor(i, this.props.fList);
  //       this.props.imgDetails(
  //         this.state.buildingName,
  //         i,
  //         this.props.fList[ind].fileName,
  //         () => {
  //           let myDiv = document.getElementById("mydiv");
  //           let canvas = window.d3
  //             .select("#mydiv")
  //             .append("canvas")
  //             .attr("id", "canvas" + ii)
  //             .attr("style", "border:1px solid;")
  //             .attr("width", this.state.canvasWidth)
  //             .attr("height", this.state.canvasHeight)
  //             .call(
  //               window.d3
  //                 .zoom()
  //                 .scaleExtent([1, 8])
  //                 .on("zoom", multiCanvasZoom)
  //             );
  //           let width = canvas.property("width");
  //           let height = canvas.property("height");
  //           let active = window.d3.select(null);
  //           let zoom1 = window.d3.zoom().on("zoom", multiCanvasZoom);
  //           let initialTransform = window.d3.zoomIdentity
  //             .translate(0, 0)
  //             .scale(1);
  //           let ctx = canvas.node().getContext("2d");
  //           let div = document.getElementById("mydiv1");
  //           let img1 = new Image();
  //           img1.src = `${config.imgUrl}${this.props.getImage[1]}`;
  //           img1.hidden = true;
  //           div.appendChild(img1);
  //           let me = this;
  //           let get_val = ans.get(i);
  //           let loaded = false;
  //           function timer(ms) {
  //             return new Promise(res => setTimeout(res, ms));
  //           }
  //           function multiCanvasZoom() {
  //             var transform = window.d3.event.transform;
  //             ctx.save();
  //             ctx.clearRect(0, 0, width, height);
  //             ctx.translate(transform.x, transform.y);
  //             ctx.scale(transform.k, transform.k);
  //             loaded = false;
  //             multiCanvas();
  //             ctx.restore();
  //           }
  //           function multiCanvas() {
  //             if (loaded === false) {
  //               ctx.drawImage(
  //                 img1,
  //                 0,
  //                 0,
  //                 img1.width,
  //                 img1.height,
  //                 0,
  //                 0,
  //                 width,
  //                 height
  //               );
  //               var id = "canvas" + ii;
  //               var index = me.find_floor(i, me.grids_all);
  //               var m = me.grids_all[index].length;
  //               var n = me.grids_all[index].breadth;
  //               for (var j = 0; j < get_val.length - 1; j++) {
  //                 var dest_x = get_val[j + 1] % m;
  //                 var dest_y = parseInt(get_val[j + 1] / m);
  //                 console.log("idds",id,me.state.zoomed)
  //                 me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);
  //               }
  //               var node_count = 0;
  //               for (var j of get_val) {
  //                 if (ii === count - 1) {
  //                   if (node_count === get_val.length - 1) {
  //                     me.color_canvas_spl(j, id, "green", floorLlist[ii]);
  //                   } else {
  //                     me.color_canvas_spl(j, id, "yellow", floorLlist[ii]);
  //                   }
  //                 } else {
  //                   if (node_count === 0 && ii === 0) {
  //                     me.color_canvas_spl(j, id, "red", floorLlist[ii]);
  //                   } else {
  //                     me.color_canvas_spl(j, id, "yellow", floorLlist[ii]);
  //                   }
  //                 }
  //                 node_count++;
  //               }
  //               loaded = true;
  //             }
  //           }
  //           function timer(ms) {
  //             return new Promise(res => setTimeout(res, ms));
  //            }
  //            ( async ()=>{
  //             img1.onload = function() {
  //               multiCanvas();
  //             }
  //             await timer(1000)
  //             this.setState({
  //               zoomed:true
  //             })
  //           // zoomTo()
  //           })()
  //           // zoomTo()
  //         }
  //       );
  
  //       await outerTimer(4000);
  //     }
  //   }
  //   imageLoad()
  // }




        // switch(this.actualAngle){
      //   case this.actualAngle >= 0 && this.actualAngle <=30:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x,
      //         y: refinedPoints[currentRPoint].y-1
      //       }
      //     break;
      //   case this.actualAngle > 30 && this.actualAngle <=60:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x+1,
      //         y: refinedPoints[currentRPoint].y-1
      //       }
      //     break;
      //   case this.actualAngle > 60 && this.actualAngle <=90:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x-1,
      //         y: refinedPoints[currentRPoint].y-1
      //       }
      //       break;
      //   case this.actualAngle > 90 && this.actualAngle <=120:
      //             coordinates = {
      //     x: refinedPoints[currentRPoint].x+1,
      //     y: refinedPoints[currentRPoint].y-1
      //   }
      //       break;
      //   case this.actualAngle > 120 && this.actualAngle <=150:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x+1,
      //         y: refinedPoints[currentRPoint].y-1
      //       }
      //       break;
      //   case this.actualAngle > 150 && this.actualAngle <=180:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x+1,
      //         y: refinedPoints[currentRPoint].y-1
      //       }
      //       break;
      //   case this.actualAngle > 180 && this.actualAngle <=210:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x+1,
      //         y: refinedPoints[currentRPoint].y+1
      //       }
      //       break;
      //   case this.actualAngle > 210 && this.actualAngle <=240:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x+1,
      //         y: refinedPoints[currentRPoint].y+1
      //       }
      //       break;
      //   case this.actualAngle > 240 && this.actualAngle <=270:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x+1,
      //         y: refinedPoints[currentRPoint].y+1
      //       }
      //       break;
      //   case this.actualAngle > 270 && this.actualAngle <=300:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x,
      //         y: refinedPoints[currentRPoint].y + 1
      //       }
      //       break;
      //   case this.actualAngle > 300 && this.actualAngle <=330:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x,
      //         y: refinedPoints[currentRPoint].y + 1
      //       }
      //       break;
      //   case this.actualAngle > 330 && this.actualAngle <=360:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x,
      //         y: refinedPoints[currentRPoint].y + 1
      //       }
      //       break;
      //   default:
      //       coordinates = {
      //         x: refinedPoints[currentRPoint].x+1,
      //         y: refinedPoints[currentRPoint].y-1
      //       }
      // }
      if(this.actualAngle >= 0 && this.actualAngle <=45){
        coordinates = {
          x: refinedPoints[currentRPoint].x - 1,
          y: refinedPoints[currentRPoint].y - 1
        }
      }else if(this.actualAngle > 45 && this.actualAngle <=90){
        // coordinates = {
        //   x: refinedPoints[currentRPoint].x,
        //   y: refinedPoints[currentRPoint].y + 1
        // }
        coordinates = {
          x: refinedPoints[currentRPoint].x,
          y: refinedPoints[currentRPoint].y - 1
        }
      }else if(this.actualAngle > 90 && this.actualAngle <=135){
        coordinates = {
          x: refinedPoints[currentRPoint].x + 1,
          y: refinedPoints[currentRPoint].y + 1
        }
      }else if(this.actualAngle > 135 && this.actualAngle <=180){
        coordinates = {
          x: refinedPoints[currentRPoint].x+1,
          y: refinedPoints[currentRPoint].y-1
        }
      }else if(this.actualAngle > 180 && this.actualAngle <=225){
        // coordinates = {
        //   x: refinedPoints[currentRPoint].x+1,
        //   y: refinedPoints[currentRPoint].y-1
        // }
        coordinates = {
          x: refinedPoints[currentRPoint].x + 1,
          y: refinedPoints[currentRPoint].y
        }
      }else if(this.actualAngle > 225 && this.actualAngle <=270){
        // coordinates = {
        //   x: refinedPoints[currentRPoint].x,
        //   y: refinedPoints[currentRPoint].y - 1
        // }
        coordinates = {
          x: refinedPoints[currentRPoint].x,
          y: refinedPoints[currentRPoint].y + 1
        }
      }else if(this.actualAngle > 270 && this.actualAngle <=315){
        // coordinates = {
        //   x: refinedPoints[currentRPoint].x - 1,
        //   y: refinedPoints[currentRPoint].y - 1
        // }
        coordinates = {
          x: refinedPoints[currentRPoint].x - 1,
          y: refinedPoints[currentRPoint].y + 1
        }
      }else if(this.actualAngle > 315 && this.actualAngle <=360){
        coordinates = {
          x: refinedPoints[currentRPoint].x,
          y: refinedPoints[currentRPoint].y
        }
      }else{
        coordinates = {
          x: refinedPoints[currentRPoint].x+1,
          y: refinedPoints[currentRPoint].y
        }
        }

        path_angle = 105;
floorangle=255;
diff = 360-floorangle;

CurrentDirection = 210;
%function CalulatePath(path_angle,diff)
if (path_angle >= 0) && (path_angle < 106)
    pathGN = 360-(diff-path_angle);
    rotateDirection = pathGN - CurrentDirection;
elseif (path_angle > 105) && (path_angle <= 180)
    pathGN = path_angle-diff;
    rotateDirection = pathGN - CurrentDirection;
elseif(path_angle <= -1) &&  (path_angle >= -180)
    path_angleN= 180+path_angle;
    disp('hi')
    pathGN = path_angleN+ 180 - diff;
    rotateDirection = pathGN - CurrentDirection;
end

disp(pathGN)
    
%rotateDirection = PathGN - CurrentDirection;
disp(rotateDirection/30)



  // callimage(cnt, ans, count, clist, floorLlist) {
  //   if (cnt === count - 1) {
  //     let i = Array.from(ans.keys())[cnt];
  //     let ind = this.find_floor(i, this.props.fList);
  //     this.props.getImage[1] = "";
  //     this.props.imgDetails(
  //       this.state.buildingName,
  //       i,
  //       this.props.fList[ind].fileName,
  //       () => {
  //         let myDiv = document.getElementById("mydiv");
  //         let canvas = window.d3
  //           .select("#mydiv")
  //           .append("canvas")
  //           .attr("id", "canvas" + cnt)
  //           .attr("style", "border:1px solid;")
  //           .attr("width", this.state.canvasWidth)
  //           .attr("height", this.state.canvasHeight)
  //           .call(
  //             window.d3
  //               .zoom()
  //               .scaleExtent([1, 8])
  //               .on("zoom", zoom)
  //           );
  //           var active = window.d3.select(null);
  //           var zoom1 = window.d3.zoom().on("zoom", zoom);
  //           var initialTransform = window.d3.zoomIdentity
  //             .translate(0, 0)
  //             .scale(1);
  //             let zooming = false
  //             function zoom() {
  //               var transform = window.d3.event.transform;
  //               zooming = true
  //                 ctx.save();
  //                 ctx.clearRect(0, 0, width, height);
  //                 ctx.translate(transform.x, transform.y);
  //                 ctx.scale(transform.k, transform.k);
  //                 draw();
  //                 ctx.restore();
  //             }

  //         let width = canvas.property("width");
  //         let height = canvas.property("height");
  //         let ctx = canvas.node().getContext("2d");
  //         let div = document.getElementById("mydiv1");
  //         let img1 = new Image();
  //         img1.src = `${config.imgUrl}${this.props.getImage[1]}`;
  //         img1.hidden = true;
  //         div.appendChild(img1);
  //         var loaded = false;
  //         let me = this;
  //         var get_val = ans.get(i);

  //         img1.onload = function() {
  //           draw();
  //         };

  //         function draw() {
  //           if (active.node() === this) return reset();
  //           active.classed("active", false);
  //           active = window.d3.select(this).classed("active", true);
            // console.log("img2",img1)
  //           if (loaded === false || zooming === true) {
  //             ctx.drawImage(
  //               img1,
  //               0,
  //               0,
  //               img1.width,
  //               img1.height,
  //               0,
  //               0,
  //               width,
  //               height
  //             );
  //             var id = "canvas" + cnt;
  //             var index = me.find_floor(i, me.grids_all);
  //             var m = me.grids_all[index].length;
  //             var n = me.grids_all[index].breadth;
  //             for (var j = 0; j < get_val.length - 1; j++) {
  //               var dest_x = get_val[j + 1] % m;
  //               var dest_y = parseInt(get_val[j + 1] / m);
  //               me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);
  //             }
  //             var node_count = 0;
  //             for (var j of get_val) {
  //               if (node_count == get_val.length - 1) {
  //                 me.color_canvas_spl(j, id, "green", floorLlist[cnt]);
  //               } else {
  //                 me.color_canvas_spl(j, id, "yellow", floorLlist[cnt]);
  //               }
  //               node_count++;
  //             }
  //             loaded = true;
  //           }
  //         }

  //         function reset() {
  //           active.classed("active", false);
  //           active = window.d3.select(null);
  //           canvas
  //             .transition()
  //             .duration(750)
  //             .call(zoom1.transform, initialTransform);
  //         }
  //       }
  //     );
  //   } else {
  //     var loaded = false;
  //     let i = Array.from(ans.keys())[cnt];
  //     if (i === this.state.srcfloor) {

  //       let ind = this.find_floor(i, this.props.fList);
  //       var img2 = document.getElementById("myImage");
  //       this.props.getImage[1] = "";

  //       this.props.imgDetails(
  //         this.state.buildingName,
  //         i,
  //         this.props.fList[ind].fileName,
  //         () => {
  //           let myDiv = document.getElementById("mydiv");
  //           let canvas = window.d3
  //             .select("#mydiv")
  //             .append("canvas")
  //             .attr("id", "canvas" + cnt)
  //             .attr("style", "border:1px solid;")
  //             .attr("width", this.state.canvasWidth)
  //             .attr("height", this.state.canvasHeight)
  //             .call(
  //               window.d3
  //                 .zoom()
  //                 .scaleExtent([1, 8])
  //                 .on("zoom", zoom2)
  //             );

  //             var active2= window.d3.select(null);
  //             var zoom3 = window.d3.zoom().on("zoom", zoom2);
  //             var initialTransform2 = window.d3.zoomIdentity
  //               .translate(0, 0)
  //               .scale(1);
  //               let zooming1 = false
  //               function zoom2() {
  //                 var transform = window.d3.event.transform;
  //                 zooming1 = true
  //                   ctx.save();
  //                   ctx.clearRect(0, 0, width, height);
  //                   ctx.translate(transform.x, transform.y);
  //                   ctx.scale(transform.k, transform.k);
  //                   draw1();
  //                   ctx.restore();
  //               }

  //               img2.onload = function() {
                  // console.log("ii",i,img2)
  //                 draw1();
  //               };

  //           let width = canvas.property("width");
  //           let height = canvas.property("height");

  //           let ctx = canvas.node().getContext("2d");
  //           let div = document.getElementById("mydiv1");
  //           img2.src = `${config.imgUrl}${this.props.getImage[1]}`;
  //           img2.hidden = true;
  //           // div.appendChild(img1);

  //           var me = this;
  //           var get_val = ans.get(i);
  //           // img1.src = `${config.imgUrl}${this.props.getImage[1]}`;
  //           function draw1() {
  //           if (active2.node() === this) return reset();
  //           active2.classed("active", false);
  //           active2 = window.d3.select(this).classed("active", true);
  //           if (loaded === false) {
  //             if (i === me.state.srcfloor) {
  //               ctx.drawImage(
  //                 img2,
  //                 0,
  //                 0,
  //                 img2.width,
  //                 img2.height,
  //                 0,
  //                 0,
  //                 width,
  //                 height
  //               );
  //               var id = "canvas" + cnt;
  //               var index = me.find_floor(i, me.grids_all);
  //               var m = me.grids_all[index].length;
  //               var n = me.grids_all[index].breadth;
  //               for (var j = 0; j < get_val.length - 1; j++) {
  //                 var dest_x = get_val[j + 1] % m;
  //                 var dest_y = parseInt(get_val[j + 1] / m);
  //                 me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);
  //               }
  //               var node_count = 0;
  //               for (var j of get_val) {
  //                 if (node_count == 0 && cnt == 0) {
  //                   me.color_canvas_spl(j, id, "red", floorLlist[cnt]);
  //                 } else {
  //                   me.color_canvas_spl(j, id, "yellow", floorLlist[cnt]);
  //                 }
  //                 node_count++;
  //               }
  //             }
  //             me.props.getImage[1] = "";
  //             cnt++;
  //             me.callimage(cnt, ans, count, clist, floorLlist);
  //             loaded = true;
  //           }
  //         }

  //         function reset() {
  //           active2.classed("active", false);
  //           active2 = window.d3.select(null);
  //           canvas
  //             .transition()
  //             .duration(750)
  //             .call(zoom3.transform, initialTransform2);
  //         }

  //         }
  //       );
  //     } else {
  //       cnt++;
  //       this.callimage(cnt, ans, count, clist, floorLlist);
  //       loaded = true;
  //     }
  //   }
  // }





    for (let ii = 0; ii < clist.length; ii++) {
      let i = Array.from(ans.keys())[ii];
    console.log("srclist",i);
      if (i === this.state.srcfloor || i === this.state.dstfloor) {
        let ind = this.find_floor(i, this.props.fList);
        // this.props.imgDetails(
        //   this.state.buildingName,
        //   i,
        //   this.props.fList[ind].fileName,
        //   () => {
        //     let myDiv = document.getElementById("mydiv");
        //     let canvas = window.d3
        //       .select("#mydiv")
        //       .append("canvas")
        //       .attr("id", "canvas" + ii)
        //       .attr("style", "border:1px solid;")
        //       .attr("width", this.state.canvasWidth)
        //       .attr("height", this.state.canvasHeight)
        //       .call(
        //         window.d3
        //           .zoom()
        //           .scaleExtent([1, 8])
        //           .on("zoom", multiCanvasZoom)
        //       );
        //     let width = canvas.property("width");
        //     let height = canvas.property("height");
        //     let active = window.d3.select(null);
        //     let zoom1 = window.d3.zoom().on("zoom", multiCanvasZoom);
        //     let initialTransform = window.d3.zoomIdentity
        //       .translate(0, 0)
        //       .scale(1);
        //     let ctx = canvas.node().getContext("2d");
        //     let div = document.getElementById("mydiv1");
        //     let img1 = new Image();
        //     img1.src = `${config.imgUrl}${this.props.getImage[1]}`;
        //     img1.hidden = true;
        //     div.appendChild(img1);
        //     let me = this;
        //     let get_val = ans.get(i);
        //     let loaded = false;
        //     img1.onload = function() {
        //       multiCanvas();
        //     };

        //     function multiCanvasZoom() {
        //       var transform = window.d3.event.transform;
        //       ctx.save();
        //       ctx.clearRect(0, 0, width, height);
        //       ctx.translate(transform.x, transform.y);
        //       ctx.scale(transform.k, transform.k);
        //       loaded = false;
        //       multiCanvas();
        //       ctx.restore();
        //     }

        //     function multiCanvas() {
        //       if (loaded === false) {
        //         ctx.drawImage(
        //           img1,
        //           0,
        //           0,
        //           img1.width,
        //           img1.height,
        //           0,
        //           0,
        //           width,
        //           height
        //         );
        //         var id = "canvas" + ii;
        //         var index = me.find_floor(i, me.grids_all);
        //         var m = me.grids_all[index].length;
        //         var n = me.grids_all[index].breadth;
        //         for (var j = 0; j < get_val.length - 1; j++) {
        //           var dest_x = get_val[j + 1] % m;
        //           var dest_y = parseInt(get_val[j + 1] / m);
        //           me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);
        //         }
        //         var node_count = 0;
        //         for (var j of get_val) {
        //           if (ii === count - 1) {
        //             if (node_count === get_val.length - 1) {
        //               me.color_canvas_spl(j, id, "green", floorLlist[ii]);
        //             } else {
        //               me.color_canvas_spl(j, id, "yellow", floorLlist[ii]);
        //             }
        //           } else {
        //             if (node_count === 0 && ii === 0) {
        //               me.color_canvas_spl(j, id, "red", floorLlist[ii]);
        //             } else {
        //               me.color_canvas_spl(j, id, "yellow", floorLlist[ii]);
        //             }
        //           }
        //           node_count++;
        //         }
        //         loaded = true;
        //       }
        //     }

        //     function zoomTo() {
        //       let src_val = get_val[0];
        //       let dest_val = get_val[1];
        //       let index = me.find_floor(i, me.grids_all);
        //       let m = me.grids_all[index].length;
        //       let src_x = parseInt(src_val) % m;
        //       let src_y = parseInt(parseInt(src_val) / m);
        //       let dest_x = parseInt(dest_val) % m;
        //       let dest_y = parseInt(parseInt(dest_val) / m);
        //       let dx, dy;
        //       if (dest_x > src_y) {
        //         dx = dest_x - src_x;
        //       } else {
        //         dx = src_x - dest_x;
        //       }
        //       if (dest_y > src_y) {
        //         dy = dest_y - src_y;
        //       } else {
        //         dy = src_y - dest_y;
        //       }
        //       let x = (src_x + dest_x) / 2;
        //       let y = (dest_y + src_y) / 2;
        //       let scale = Math.max(
        //         1,
        //         Math.min(8, 0.9 / Math.max(dx / width, dy / height))
        //       );
        //       let translate = [width / 2 - scale * x, height / 2 - scale * y];
        //       var transform = window.d3.zoomIdentity
        //         .translate(translate[0], translate[1])
        //         .scale(2);
        //       canvas
        //         .transition()
        //         .duration(750)
        //         .call(zoom1.transform, transform);
        //     }
        //   }
        // );
      }
    }

      function zoomTo() {
                let src_val = get_val[0];
                let dest_val = get_val[1];
                let index = me.find_floor(i, me.grids_all);
                let m = me.grids_all[index].length;
                let src_x = parseInt(src_val) % m;
                let src_y = parseInt(parseInt(src_val) / m);
                let dest_x = parseInt(dest_val) % m;
                let dest_y = parseInt(parseInt(dest_val) / m);
                let dx, dy;
                if (dest_x > src_y) {
                  dx = dest_x - src_x;
                } else {
                  dx = src_x - dest_x;
                }
                if (dest_y > src_y) {
                  dy = dest_y - src_y;
                } else {
                  dy = src_y - dest_y;
                }
                let x = (src_x + dest_x) / 2;
                let y = (dest_y + src_y) / 2;
                let scale = Math.max(
                  1,
                  Math.min(8, 0.9 / Math.max(dx / width, dy / height))
                );
                let translate = [width / 2 - scale * x, height / 2 - scale * y];
                var transform = window.d3.zoomIdentity
                  .translate(translate[0], translate[1])
                  .scale(2);
                canvas
                  .transition()
                  .duration(750)
                  .call(zoom1.transform, transform);
              }